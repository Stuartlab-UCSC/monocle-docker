#!/usr/local/bin/Rscript
default_file_name <- '/data/output_monocle.json'
default_format <- 'json'

input <- commandArgs(trailingOnly=TRUE)[1]
output <- commandArgs(trailingOnly=TRUE)[2]
format <- commandArgs(trailingOnly=TRUE)[3]

# Arg checking, & setting defaults
if(is.na(output)){
  output <- default_file_name
} else {
  output <- paste(c("/data/", output),collapse="")
}
if(is.na(format)){
  format <- default_format
}

suppressMessages(library(monocle))
source("/home/traj-converters/src/R/monocle_convert.r")

read_data <- function(file){
  # Read tab matrix from shared dir.
  as.matrix(read.table(paste(c("/data/",file),collapse=""), sep="\t", header=T, row.names=1))
}

monocle_analysis <- function(expression_matrix){
  # Return a completed monocle object
  cds <- newCellDataSet(expression_matrix, expressionFamily = negbinomial())
  cds <- estimateSizeFactors(cds)
  cds <- estimateDispersions(cds)
  ordering_genes <- subset(dispersionTable(cds), mean_expression>=0.1)
  cds <- setOrderingFilter(cds, ordering_genes)
  cds <- reduceDimension(cds, max_components = 2, method = "DDRTree")
  cds <- orderCells(cds)
  return(cds)
}

# Execute pipeline.
message("Reading in Data...")
exp_mat <- read_data(input)
message("Executing monocle...")
monocle_obj <- suppressWarnings(monocle_analysis(exp_mat))

if(format == 'json'){
  message("Converting to common format")
  write_common_json(monocle_obj, file=output)
} else if (format == 'cxb'){
  message("Converterting to cell x branch")
  write_cell_x_branch(monocle_obj, file=output)
}

message("complete")
